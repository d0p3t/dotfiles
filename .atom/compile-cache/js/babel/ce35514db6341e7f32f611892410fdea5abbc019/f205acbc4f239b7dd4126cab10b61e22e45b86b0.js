function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

// eslint-disable-next-line import/no-extraneous-dependencies

var _jasmineFix = require('jasmine-fix');

// NOTE: If using fit you must add it to the list above!

'use babel';

var fixturePath = (0, _path.join)(__dirname, 'fixtures');
var goodPath = (0, _path.join)(fixturePath, 'good.py');
var badPath = (0, _path.join)(fixturePath, 'bad.py');
var errwarnPath = (0, _path.join)(fixturePath, 'errwarn.py');
var builtinsPath = (0, _path.join)(fixturePath, 'builtins.py');

describe('The flake8 provider for Linter', function () {
  var lint = require('../lib/main.js').provideLinter().lint;

  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    // Info about this beforeEach() implementation:
    // https://github.com/AtomLinter/Meta/issues/15
    var activationPromise = atom.packages.activatePackage('linter-flake8');

    yield atom.packages.activatePackage('language-python');
    yield atom.workspace.open(goodPath);

    atom.packages.triggerDeferredActivationHooks();
    yield activationPromise;
  }));

  (0, _jasmineFix.it)('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-flake8')).toBe(true);
  });

  (0, _jasmineFix.it)('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-flake8')).toBe(true);
  });

  describe('checks bad.py and', function () {
    var editor = null;
    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(badPath);
    }));

    (0, _jasmineFix.it)('finds at least one message', _asyncToGenerator(function* () {
      var messages = yield lint(editor);
      expect(messages.length).toBeGreaterThan(0);
    }));

    (0, _jasmineFix.it)('verifies that message', _asyncToGenerator(function* () {
      var messages = yield lint(editor);
      expect(messages[0].type).toBe('Warning');
      expect(messages[0].html).not.toBeDefined();
      expect(messages[0].text).toBe('F821 — undefined name \'asfd\'');
      expect(messages[0].filePath).toBe(badPath);
      expect(messages[0].range).toEqual([[0, 0], [0, 4]]);
    }));

    (0, _jasmineFix.it)('checks that the message is an error if flakeErrors is set', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.flakeErrors', true);
      var messages = yield lint(editor);
      expect(messages[0].type).toBe('Error');
    }));
  });

  describe('checks errwarn.py and', function () {
    var editor = null;

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(errwarnPath);
    }));

    (0, _jasmineFix.it)('finds at least one message', _asyncToGenerator(function* () {
      var messages = yield lint(editor);
      expect(messages.length).toBeGreaterThan(0);
    }));

    (0, _jasmineFix.it)('finds the message is a warning if pycodestyleErrorsToWarnings is set', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', true);
      var messages = yield lint(editor);
      expect(messages[0].type).toBe('Warning');
    }));

    (0, _jasmineFix.it)("finds the message is an error if pycodestyleErrorsToWarnings isn't set", _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', false);
      var messages = yield lint(editor);
      expect(messages[0].type).toBe('Error');
    }));
  });

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(goodPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  describe('executable path', function () {
    var helpers = require('atom-linter');

    var editor = null;
    var realExec = helpers.exec;
    var execParams = [];
    function fakeExec() {
      for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
        parameters[_key] = arguments[_key];
      }

      execParams.push(parameters);
      return Promise.resolve('');
    }

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      atom.project.addPath(fixturePath);

      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: fakeExec
      });

      editor = yield atom.workspace.open(badPath);
    }));

    afterEach(function () {
      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: realExec
      });
    });

    (0, _jasmineFix.it)('finds executable relative to project', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.executablePath', (0, _path.join)('$PROJECT', 'flake8'));
      yield lint(editor);
      expect(execParams.pop()[0]).toBe((0, _path.join)(fixturePath, 'flake8'));
    }));

    (0, _jasmineFix.it)('finds executable relative to projects', _asyncToGenerator(function* () {
      var paths = [(0, _path.join)('$project', 'null'), (0, _path.join)('$pRoJeCt', 'flake1'), (0, _path.join)('$PrOjEcT', 'flake2'), (0, _path.join)('$PROJECT', 'flake8')].join(';');
      atom.config.set('linter-flake8.executablePath', paths);
      yield lint(editor);
      expect(execParams.pop()[0]).toBe((0, _path.join)(fixturePath, 'flake8'));
    }));

    (0, _jasmineFix.it)('finds executable using project name', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.executablePath', (0, _path.join)('$PROJECT_NAME', 'flake8'));
      yield lint(editor);
      expect(execParams.pop()[0]).toBe((0, _path.join)('fixtures', 'flake8'));
    }));

    (0, _jasmineFix.it)('finds executable using project names', _asyncToGenerator(function* () {
      var paths = [(0, _path.join)('$project_name', 'null'), (0, _path.join)('$pRoJeCt_NaMe', 'flake1'), (0, _path.join)('$PrOjEcT_nAmE', 'flake2'), (0, _path.join)('$PROJECT_NAME', 'flake8')].join(';');
      var correct = [(0, _path.join)('fixtures', 'null'), (0, _path.join)('fixtures', 'flake1'), (0, _path.join)('fixtures', 'flake2'), (0, _path.join)('fixtures', 'flake8')].join(';');
      atom.config.set('linter-flake8.executablePath', paths);
      yield lint(editor);
      expect(execParams.pop()[0]).toBe(correct);
    }));

    (0, _jasmineFix.it)('normalizes executable path', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.executablePath', (0, _path.join)(fixturePath, '..', 'fixtures', 'flake8'));
      yield lint(editor);
      expect(execParams.pop()[0]).toBe((0, _path.join)(fixturePath, 'flake8'));
    }));

    (0, _jasmineFix.it)('finds backup executable', _asyncToGenerator(function* () {
      var flakeNotFound = (0, _path.join)('$PROJECT', 'flake8_notfound');
      var flakeBackup = (0, _path.join)(fixturePath, 'flake8_backup');
      atom.config.set('linter-flake8.executablePath', flakeNotFound + ';' + flakeBackup);
      yield lint(editor);
      expect(execParams.pop()[0]).toBe((0, _path.join)(fixturePath, 'flake8_backup'));
    }));
  });

  describe('works with defining builtins', function () {
    var editor = undefined;

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      editor = yield atom.workspace.open(builtinsPath);
    }));

    (0, _jasmineFix.it)('shows all warnings when the setting is blank', _asyncToGenerator(function* () {
      var messages = yield lint(editor);
      expect(messages.length).toBe(2);

      expect(messages[0].type).toBe('Warning');
      expect(messages[0].html).not.toBeDefined();
      expect(messages[0].text).toBe('F821 — undefined name \'bar\'');
      expect(messages[0].filePath).toBe(builtinsPath);
      expect(messages[0].range).toEqual([[0, 6], [0, 9]]);

      expect(messages[1].type).toBe('Warning');
      expect(messages[1].html).not.toBeDefined();
      expect(messages[1].text).toBe('F821 — undefined name \'foo_bar\'');
      expect(messages[1].filePath).toBe(builtinsPath);
      expect(messages[1].range).toEqual([[1, 9], [1, 16]]);
    }));

    (0, _jasmineFix.it)('works with a single builtin', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.builtins', ['bar']);
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);

      expect(messages[0].type).toBe('Warning');
      expect(messages[0].html).not.toBeDefined();
      expect(messages[0].text).toBe('F821 — undefined name \'foo_bar\'');
      expect(messages[0].filePath).toBe(builtinsPath);
      expect(messages[0].range).toEqual([[1, 9], [1, 16]]);
    }));

    (0, _jasmineFix.it)('works with multiple builtins', _asyncToGenerator(function* () {
      atom.config.set('linter-flake8.builtins', ['bar', 'foo_bar']);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,